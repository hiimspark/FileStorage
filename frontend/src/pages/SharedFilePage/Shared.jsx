import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import './Shared.css';
import { downloadFile, getSharedFileInfo } from '../../utils/api';

const Shared = () => {
  const { token } = useParams();
  const navigate = useNavigate();
  const [fileInfo, setFileInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    const fetchFileInfo = async () => {
      try {
        const data = await getSharedFileInfo(token);
        setFileInfo(data);
      } catch (err) {
        console.error('Error fetching shared file:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ');
      } finally {
        setLoading(false);
      }
    };

    fetchFileInfo();
  }, [token]);

  const handleDownload = async (fileId, filename) => {
    try {
      const { success } = await downloadFile(fileId, filename);
      if (success) {
        console.log(`–§–∞–π–ª ${filename} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: ${error.message}`);
    }
  };

  const copyToClipboard = () => {
    if (fileInfo) {
      navigator.clipboard.writeText(window.location.href)
        .then(() => {
          setCopied(true);
          setTimeout(() => setCopied(false), 2000);
        })
        .catch(err => {
          console.error('Copy failed:', err);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É');
        });
    }
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (error) {
    return (
      <div className="error-container">
        <div className="error-message">{error}</div>
        <button onClick={() => navigate('/')} className="home-button">
          –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
      </div>
    );
  }

  if (!fileInfo) {
    return null;
  }

  return (
    <div className="shared-file-container">
      <div className="file-card">
        <div className="file-header">
          <h2>–û–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É</h2>
          <div className="file-icon">{getFileIcon(fileInfo.file.name)}</div>
        </div>

        <div className="file-details">
          <div className="detail-row">
            <span className="detail-label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
            <span className="detail-value">{fileInfo.file.name}</span>
          </div>
          <div className="detail-row">
            <span className="detail-label">–†–∞–∑–º–µ—Ä:</span>
            <span className="detail-value">{formatFileSize(fileInfo.file.size)}</span>
          </div>
          <div className="detail-row">
            <span className="detail-label">–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</span>
            <span className="detail-value">{formatDate(fileInfo.file.uploaded_at)}</span>
          </div>
          <div className="detail-row">
            <span className="detail-label">–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</span>
            <span className="detail-value">{formatDate(fileInfo.expires_at)}</span>
          </div>
        </div>

        <div className="share-link-container">
          <div className="share-link-label">–°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:</div>
          <div className="share-link-input" onClick={copyToClipboard}>
            {window.location.href}
            <span className="copy-hint">{copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'}</span>
          </div>
        </div>

        <div className="action-buttons">
          <button onClick={() => handleDownload(fileInfo.file.id, fileInfo.file.name)} className="download-button">
            –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
          </button>
          <button onClick={() => navigate('/')} className="home-button">
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    </div>
  );
};

const getFileIcon = (filename) => {
  const extension = filename.split('.').pop().toLowerCase();
  const icons = {
    pdf: 'üìï',
    doc: 'üìò', docx: 'üìò',
    xls: 'üìä', xlsx: 'üìä',
    ppt: 'üìë', pptx: 'üìë',
    jpg: 'üñº', jpeg: 'üñº', png: 'üñº', gif: 'üñº', svg: 'üñº',
    mp3: 'üéµ', wav: 'üéµ', ogg: 'üéµ',
    mp4: 'üé¨', mov: 'üé¨', avi: 'üé¨',
    zip: 'üóú', rar: 'üóú', '7z': 'üóú',
    txt: 'üìù',
    exe: '‚öôÔ∏è', dmg: '‚öôÔ∏è',
  };
  return icons[extension] || 'üìÑ';
};

const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i]);
};

const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
};

export default Shared;